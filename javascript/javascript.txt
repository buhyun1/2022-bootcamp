자바스크립트
자바스크립트(JavaScript)는 객체(object) 기반의 스크립트 언어입니다.

HTML로는 웹의 내용을 작성하고, CSS로는 웹을 디자인하며, 자바스크립트로는 웹의 동작을 구현할 수 있습니다.

 자바스크립트의 역사
자바스크립트는 1995년에 넷스케이프(Netscape)의 브렌던 아이크(Brendan Eich)에 의해 만들어졌습니다.

처음에는 모카(Mocha)라는 이름으로 개발되었으나, 그 후에 라이브스크립트(LiveScript), 최종적으로는 자바스크립트(JavaScript)라는 이름으로 변경됩니다.

자바스크립트의 특징
자바스크립트가 가지고 있는 언어적 특징은 다음과 같습니다.

1. 자바스크립트는 객체 기반의 스크립트 언어입니다.

2. 자바스크립트는 동적이며, 타입을 명시할 필요가 없는 인터프리터 언어입니다.

3. 자바스크립트는 객체 지향형 프로그래밍과 함수형 프로그래밍을 모두 표현할 수 있습니다.

자바스크립트 출력
자바스크립트는 여러 방법을 통해 결과물을 HTML 페이지에 출력할 수 있습니다.

자바스크립트에서 사용할 수 있는 출력 방법은 다음과 같습니다.

 

1. window.alert() 메소드

2. HTML DOM 요소를 이용한 innerHTML 프로퍼티

3. document.write() 메소드

4. console.log() 메소드

자바스크립트를 적용하는 방법
HTML 문서에 자바스크립트 코드를 적용하는 방법에는 다음과 같은 방법이 있습니다.

 

1. 내부 자바스크립트 코드로 적용
 내부 자바스크립트 코드
자바스크립트 코드는 <script>태그를 사용하여 HTML 문서 안에 삽입할 수 있습니다.

문법
<script>

    document.getElementById("text").innerHTML = "여러분을 환영합니다!";

</script>

 

이렇게 삽입된 자바스크립트 코드는 HTML 문서의 <head>태그나 <body>태그, 또는 양쪽 모두에 위치할 수 있습니다.

2. 외부 자바스크립트 파일로 적용
 example.js
function printDate() {

    document.getElementById("date").innerHTML = Date();

}

 

예제
<head>

    <meta charset="UTF-8">

    <title>JavaScript Apply</title>

    <script src="/examples/media/example.js"></script>

</head>

반환(return)문
function multiNum(x, y) {

    return x * y;         // x와 y를 곱한 결과를 반환함.

}

var num = multiNum(3, 4); // multiNum() 함수가 호출된 후, 그 반환값이 변수 num에 저장됨.

document.write(num);


지역 변수(local variable)
지역 변수(local variable)란 함수 내에서 선언된 변수를 가리킵니다.
예제
function localNum() {

    var num = 10; // 지역 변수 num에 숫자 10을 대입함.

    document.write("함수 내부에서 변수 num의 타입은 " + typeof num + "입니다.<br>"); // number

}

localNum();       // 함수 localNum()을 호출함.

document.write("함수의 호출이 끝난 뒤 변수 num의 타입은 " + typeof num + "입니다."); // undefined
이러한 지역 변수는 변수가 선언된 함수 내에서만 유효하며, 함수가 종료되면 메모리에서 사라집니다.

함수의 매개변수 또한 함수 내에서 정의되는 지역 변수처럼 동작합니다.

전역 변수(global variable)
전역 변수(global variable)란 함수의 외부에서 선언된 변수를 가리킵니다.
예제
var num = 10; // 전역 변수 num을 선언함.

function globalNum() {

    document.write("함수 내부에서 변수 num의 값은 " + num + "입니다.<br>"); // 10

    num = 20; // 전역 변수 num의 값을 함수 내부에서 변경함.

}

globalNum();  // 함수 globalNum()을 호출함.

document.write("함수의 호출이 끝난 뒤 변수 num의 값은 " + num + "입니다."); // 20
이러한 전역 변수는 프로그램의 어느 영역에서나 접근할 수 있으며, 웹 페이지가 닫혀야만 메모리에서 사라집니다.

객체의 생성
자바스크립트에서 객체를 생성하는 방법은 다음과 같습니다.

 

1. 리터럴 표기(literal notation)를 이용한 방법
예제
var kitty = {

    name: "나비",

    family: "코리안 숏 헤어",

    age: 1,

    weight: 0.1

};

document.write("우리 집 새끼 고양이의 이름은 " + kitty.name + "이고, 종은 " + kitty.family + "입니다.");


2. 생성자 함수(constructor function)를 이용한 방법
var day = new Date(); // new 연산자를 사용하여 Date 타입의 객체를 생성함.

document.write("올해는 " + day.getFullYear() + "년입니다.");

 


3. Object.create() 메소드를 이용한 방법

var obj = Object.create(null, {             // null 프로토타입을 사용하여 새로운 객체를 만들고

    x: { value: 100, enumerable: true },    // x좌표를 나타내는 열거할 수 있는 프로퍼티와

    y: { value: 200, enumerable: true }     // y좌표를 나타내는 열거할 수 있는 프로퍼티를 추가함.

});

obj.x;                      // x좌표

obj.y;                      // y좌표 

Object.getPrototypeOf(obj); // 객체의 프로토타입을 반환해 줌.

프로토타입의 생성
프로토타입을 생성하는 가장 기본적인 방법은 객체 생성자 함수(object constructor function)를 작성하는 것입니다.

생성자 함수를 작성하고 new 연산자를 사용해 객체를 생성하면, 같은 프로토타입을 가지는 객체들을 생성할 수 있습니다.

예제
function Dog(color, name, age) { // 개에 관한 생성자 함수를 작성함.

    this.color = color;          // 색에 관한 프로퍼티

    this.name = name;            // 이름에 관한 프로퍼티

    this.age = age;              // 나이에 관한 프로퍼티

}

var myDog = new Dog("흰색", "마루", 1); // 이 객체는 Dog라는 프로토타입을 가짐.

document.write("우리 집 강아지는 " + myDog.name + "라는 이름의 " + myDog.color + " 털이 매력적인 강아지입니다.");

this 키워드
자바스크립트에서 this 키워드는 해당 키워드가 사용된 자바스크립트 코드 영역을 포함하고 있는 객체를 가리킵니다.

 

예를 들어, 메소드 내부에서 사용된 this 키워드는 해당 메소드를 포함하고 있는 객체를 가리킵니다.

또한, 객체 내부에서 사용된 this 키워드는 객체 그 자신을 가리킵니다.

이러한 this는 변수가 아닌 키워드이므로, 사용자가 임의로 가리키는 값을 바꿀 수 없습니다.

이벤트 타입(event type)
이벤트 타입(event type)은 발생한 이벤트의 종류를 나타내는 문자열로, 이벤트 명(event name)이라고도 합니다.

가장 많이 사용하는 키보드, 마우스, HTML DOM, Window 객체 등을 처리하는 이벤트가 폭넓게 제공되고 있습니다.

이벤트 리스너 등록
작성된 이벤트 리스너는 먼저 해당 객체나 요소에 등록되어야만 호출될 수 있습니다.

객체나 요소에 이벤트 리스너를 등록하는 방법은 다음과 같습니다.

 

1. 이벤트의 대상이 되는 객체나 요소에 프로퍼티로 등록하는 방법
예제
window.onload = function() {                    // 이 함수는 HTML 문서가 로드될 때 실행됨.

    var text = document.getElementById("text"); // 아이디가 "text"인 요소를 선택함.

    text.innerHTML = "HTML 문서가 로드되었습니다.";

}
2. 객체나 요소의 메소드에 이벤트 리스너를 전달하는 방법
var showBtn = document.getElementById("btn"); // 아이디가 "btn"인 요소를 선택함.

showBtn.addEventListener("click", showText);  // 선택한 요소에 click 이벤트 리스너를 등록함.

function showText() {

    document.getElementById("text").innerHTML = "짜잔~!! 텍스트가 나타났어요!!";

}
event(
onclick, onchange onkeydown
)

append()와 appendChild()의 공통점
두 메서드는 모두 부모 자식에 자식 노드를 추가하는 메서드이다
차이점이 있다면 자식 노드를 추가하는 방식이라는 점!

📍 appendChild()
먼저 appendChild는 오로지 node객체만 자식 요소로 추가할 수 있다
코드를 통해 상세히 알아보자

const divElem = document.createElement('div')
const pElem = document.createElemment('p')

divElem.appendChild(pElem)'

// 결과 : <div><p></p></div>
위와 같이 appendChild()는 노드에 하나의 노드만 추가할 수 있다

 

📍 append()
반면 append 메서드는 appendChild와 같이 Node 객체로 자식 요소를 설정할 수 있을 뿐만 아니라, text를 사용할 수도 있다

const div = document.createElement('div');
div.append('hi')

// 결과 : <div>hi</div>
위 코드처럼 append()메서드는 노드 객체가 아닌 text 추가가 가능하다

<script src="./ToDoList.js"></script> js연결 문장
