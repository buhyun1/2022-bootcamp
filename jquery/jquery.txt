$(document).ready(function(){
                
//소스

});

$(document).on('click', '#id' , function(){
//아이디가 id 인거를 'click', 클릭할때마다 이벤트가 일어난다.
});
둘의 차이점은 정확하지는 않지만
ready 는 처음 실행 시 문서를 다 읽어 들인 후 실행되고
on은 (ex : click 이벤트) 클릭시 클릭시점의 문서내용을 읽고 이벤트에 내용을 반영해준다.
즉 ready는 문서상에서 내용이 변경이 되면 인식을 못한다.
하지만 on 은 바뀐시점의 전체 내용을 읽어오기 때문에 내용 변경 후 이벤트가 가능해 진다.

추가내용
$(document).on("click","#test",function(){
alert("얍");
})
이런 방식도 있는데 저걸 좀더 간단히 줄이면
$("#test").on("click",function(){
alert("얍");
})
이렇게 줄일 수 있다.


.val()
선택한 양식의 값을 가져옵니다. 예를 들어

var jb = $( 'input#jbInput' ).val();
은 아이디가 jbInput인 input 요소의 값을 변수 jb에 저장합니다.

.val( value )
선택한 양식의 값을 설정합니다. 예를 들어

$( 'input#jbInput' ).val( 'ABCDE' );
는 아이디가 jbInput인 input 요소의 값을 ABCDE로 정합니다.


on은
1. 단일 요소를 각 이벤트 처리기에 연결한다.
2. 복제된 요소도 이 이벤트 처리를 받을 수 있다.
3. bind() , live() , delegate() 메소드의 기능이 한번에 통합되어 있다. 

live의 가장 큰 특징은
1. 아직 생성되지 않은 엘리먼트에도 미리 이벤트를 걸어둘수 있다!!!
2. 1.7버전 이후로는 사용되지 않는다..


첫번째의 경우 
 
$(document).ready(function(){ ...
});
-> window.onload = function() {}과 같은 기능
 
두번째의 경우
 
$(function(){  ..
}); 
그냥 함수를 실행하라는 의미 입니다.
 
세번째의 경우
 
(function($){
})(jQuery);
 
이경우는 Jquery를 사용할 때, $ 달러의 의미를 jquery에서 사용하겠다는 의미가 내포되어 있습니다.
즉, $를 jquery만 사용하는 것이 아니라 다른 라이브러리에서도 사용할 수 있기 때문이에요.
만약 prototype.js 랑 jquery를 같이 사용하는 경우에는  $가 충돌이 발생하는 것입니다.

$(this)
<ul class="list">
  <li>내용1</li>
  <li>내용2</li>
  <li>내용3</li>
  <li>내용4</li>
</ul>
$(document).ready(function(){
  
  $('#list li).click(function(){
    	$(this).css({backgroundColor : 'red'});
    });

}):
이렇게 html 문서와 jQuery문이 있다면 사용자가 클릭한 li가 $(this)가 된다.

.attr( attributeName )
선택한 요소의 속성의 값을 가져옵니다. 예를 들어

$( 'div' ).attr( 'class' );
는 div 요소의 class 속성의 값을 가져옵니다.
